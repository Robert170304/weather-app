{"ast":null,"code":"import { info } from \"autoprefixer\";\nimport { DateTime } from \"luxon\";\nconst API_KEY = 'c30f47ecf7cae8fd0a2aaf19ddb20285';\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nfunction getWetherData(infoType, searchParams) {\n  const url = new URL(BASE_URL + '/' + infoType);\n  url.search = new URLSearchParams({ ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n}\n\nfunction foramatCurrentWeather(data) {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      pressure,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n}\n\nasync function formatForecastWeather(data) {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n}\n\nasync function getFormattedData(searchParams) {\n  const formattedCurrentWeather = await getWetherData('weather', searchParams).then(foramatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWetherData('onecall', {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units\n  }).then(formattedForecastWeather);\n  return formattedCurrentWeather;\n}\n\nfunction formatToLocalTime(secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL, yyyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n}\n\nexport default getFormattedData;","map":{"version":3,"names":["info","DateTime","API_KEY","BASE_URL","getWetherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","foramatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","pressure","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat"],"sources":["C:/Users/HP/weather-app/src/services/WeatherServices.js"],"sourcesContent":["import { info } from \"autoprefixer\";\r\nimport { DateTime } from \"luxon\";\r\n\r\nconst API_KEY = 'c30f47ecf7cae8fd0a2aaf19ddb20285'\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\"\r\n\r\nfunction getWetherData(infoType, searchParams) {\r\n    const url = new URL(BASE_URL + '/' + infoType)\r\n    url.search = new URLSearchParams({...searchParams, appid: API_KEY})\r\n    return fetch(url).then((res) => res.json());\r\n}\r\n\r\nfunction foramatCurrentWeather(data) {\r\n    const {coord: {lat, lon},\r\n            main: {temp,feels_like,temp_min,temp_max,pressure,humidity}, \r\n            name, \r\n            dt,\r\n            sys:{country, sunrise, sunset},\r\n            weather,\r\n            wind: {speed}} = data\r\n    const {main: details, icon} = weather[0]\r\n    return {lat, lon, temp, feels_like, temp_min, temp_max, pressure, \r\n        humidity, name, dt, country, sunrise, sunset, details, icon, speed}\r\n}\r\n\r\n\r\nasync function formatForecastWeather(data) {\r\n    let {timezone, daily, hourly} = data\r\n    daily = daily.slice(1, 6).map((d) => {\r\n        return {\r\n            title: formatToLocalTime(d.dt, timezone, 'ccc'),\r\n            temp: d.temp.day,\r\n            icon: d.weather[0].icon\r\n        }\r\n    })\r\n    hourly = hourly.slice(1, 6).map((d) => {\r\n        return {\r\n            title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),\r\n            temp: d.temp.day,\r\n            icon: d.weather[0].icon\r\n        }\r\n    });\r\n\r\n    return {timezone, daily , hourly}\r\n}\r\n\r\nasync function getFormattedData (searchParams) {\r\n    const formattedCurrentWeather = await getWetherData('weather', searchParams).then(foramatCurrentWeather)\r\n    const {lat, lon} = formattedCurrentWeather\r\n    const formattedForecastWeather = await getWetherData('onecall', {lat, lon, exclude: \"current,minutely,alerts\", units: searchParams.units})\r\n    .then(formattedForecastWeather)\r\n    return formattedCurrentWeather\r\n}\r\n\r\nfunction formatToLocalTime(secs, zone, format = \"cccc, dd LLL, yyyyy' | Local time: 'hh:mm a\") {\r\n     return DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\r\n}\r\n\r\nexport default getFormattedData;"],"mappings":"AAAA,SAASA,IAAT,QAAqB,cAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,OAAO,GAAG,kCAAhB;AACA,MAAMC,QAAQ,GAAG,yCAAjB;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,YAAjC,EAA+C;EAC3C,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQL,QAAQ,GAAG,GAAX,GAAiBE,QAAzB,CAAZ;EACAE,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB,EAAC,GAAGJ,YAAJ;IAAkBK,KAAK,EAAET;EAAzB,CAApB,CAAb;EACA,OAAOU,KAAK,CAACL,GAAD,CAAL,CAAWM,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAzB,CAAP;AACH;;AAED,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;EACjC,MAAM;IAACC,KAAK,EAAE;MAACC,GAAD;MAAMC;IAAN,CAAR;IACEC,IAAI,EAAE;MAACC,IAAD;MAAMC,UAAN;MAAiBC,QAAjB;MAA0BC,QAA1B;MAAmCC,QAAnC;MAA4CC;IAA5C,CADR;IAEEC,IAFF;IAGEC,EAHF;IAIEC,GAAG,EAAC;MAACC,OAAD;MAAUC,OAAV;MAAmBC;IAAnB,CAJN;IAKEC,OALF;IAMEC,IAAI,EAAE;MAACC;IAAD;EANR,IAMmBnB,IANzB;EAOA,MAAM;IAACI,IAAI,EAAEgB,OAAP;IAAgBC;EAAhB,IAAwBJ,OAAO,CAAC,CAAD,CAArC;EACA,OAAO;IAACf,GAAD;IAAMC,GAAN;IAAWE,IAAX;IAAiBC,UAAjB;IAA6BC,QAA7B;IAAuCC,QAAvC;IAAiDC,QAAjD;IACHC,QADG;IACOC,IADP;IACaC,EADb;IACiBE,OADjB;IAC0BC,OAD1B;IACmCC,MADnC;IAC2CI,OAD3C;IACoDC,IADpD;IAC0DF;EAD1D,CAAP;AAEH;;AAGD,eAAeG,qBAAf,CAAqCtB,IAArC,EAA2C;EACvC,IAAI;IAACuB,QAAD;IAAWC,KAAX;IAAkBC;EAAlB,IAA4BzB,IAAhC;EACAwB,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBC,GAAlB,CAAuBC,CAAD,IAAO;IACjC,OAAO;MACHC,KAAK,EAAEC,iBAAiB,CAACF,CAAC,CAAChB,EAAH,EAAOW,QAAP,EAAiB,KAAjB,CADrB;MAEHlB,IAAI,EAAEuB,CAAC,CAACvB,IAAF,CAAO0B,GAFV;MAGHV,IAAI,EAAEO,CAAC,CAACX,OAAF,CAAU,CAAV,EAAaI;IAHhB,CAAP;EAKH,CANO,CAAR;EAOAI,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,GAAnB,CAAwBC,CAAD,IAAO;IACnC,OAAO;MACHC,KAAK,EAAEC,iBAAiB,CAACF,CAAC,CAAChB,EAAH,EAAOW,QAAP,EAAiB,SAAjB,CADrB;MAEHlB,IAAI,EAAEuB,CAAC,CAACvB,IAAF,CAAO0B,GAFV;MAGHV,IAAI,EAAEO,CAAC,CAACX,OAAF,CAAU,CAAV,EAAaI;IAHhB,CAAP;EAKH,CANQ,CAAT;EAQA,OAAO;IAACE,QAAD;IAAWC,KAAX;IAAmBC;EAAnB,CAAP;AACH;;AAED,eAAeO,gBAAf,CAAiC3C,YAAjC,EAA+C;EAC3C,MAAM4C,uBAAuB,GAAG,MAAM9C,aAAa,CAAC,SAAD,EAAYE,YAAZ,CAAb,CAAuCO,IAAvC,CAA4CG,qBAA5C,CAAtC;EACA,MAAM;IAACG,GAAD;IAAMC;EAAN,IAAa8B,uBAAnB;EACA,MAAMC,wBAAwB,GAAG,MAAM/C,aAAa,CAAC,SAAD,EAAY;IAACe,GAAD;IAAMC,GAAN;IAAWgC,OAAO,EAAE,yBAApB;IAA+CC,KAAK,EAAE/C,YAAY,CAAC+C;EAAnE,CAAZ,CAAb,CACtCxC,IADsC,CACjCsC,wBADiC,CAAvC;EAEA,OAAOD,uBAAP;AACH;;AAED,SAASH,iBAAT,CAA2BO,IAA3B,EAAiCC,IAAjC,EAA+F;EAAA,IAAxDC,MAAwD,uEAA/C,6CAA+C;EAC1F,OAAOvD,QAAQ,CAACwD,WAAT,CAAqBH,IAArB,EAA2BI,OAA3B,CAAmCH,IAAnC,EAAyCI,QAAzC,CAAkDH,MAAlD,CAAP;AACJ;;AAED,eAAeP,gBAAf"},"metadata":{},"sourceType":"module"}